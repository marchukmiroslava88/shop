{"version":3,"sources":["components/AppMinMax/index.js","pages/Cart/index.js","pages/OrderForm/index.js","pages/Result/index.js","store/cart.js","store/products.js","store/order.js","api/helpers/makeRequest.js","api/products.js","store/index.js","components/Loader/index.js","pages/Products/index.js","pages/Card/index.js","pages/Delivery/index.js","App.js","index.js"],"names":["props","state","quantity","qty","changeVal","bind","onChangeVal","set","newVal","Math","min","max","this","setState","onChange","e","target","value","InputGroup","Button","variant","style","width","onClick","decrease","Form","Control","type","onBlur","increase","React","Component","Cart","inject","observer","cart","stores","productsRows","productsDetailed","get","map","product","key","id","title","price","changeQty","deleteProduct","Table","bordered","hover","colSpan","totalPrice","to","OrderForm","handleSubmit","order","onSubmit","isValidationPassed","history","push","orderModel","fields","field","Group","name","Label","label","handleChange","placeholder","errors","Alert","Check","lastOrderCache","products","rootStore","observable","computed","reduce","accum","item","parseFloat","toFixed","action","find","splice","findIndex","addToCart","obj","productsList","pr","getById","reset","clear","items","load","Promise","resolve","api","all","then","data","isValid","cartProducts","preventDefault","validateForm","match","email","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","phone","isConfirm","Object","values","every","error","API_URL","url","options","baseUrl","fetch","response","status","text","Error","json","makeRequest","cartStore","productsStore","orderStore","className","src","alt","Products","showLoader","finally","productsInCart","Loader","Card","includes","Link","as","Img","image","Body","Title","Text","description","Footer","productCard","params","App","Navbar","bg","expand","Collapse","Nav","Item","exact","NavLink","path","component","Order","Result","Delivery","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4bAMI,WAAYA,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,EAAKF,MAAMG,KAGzB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,IAAM,EAAKA,IAAIF,KAAT,gBARI,E,gDAWfG,GACA,IAAIN,EAAWO,KAAKC,IAAID,KAAKE,IAAIH,EAAQI,KAAKZ,MAAMU,KAAME,KAAKZ,MAAMW,KACrEC,KAAKC,SAAS,CAACX,aAEfU,KAAKZ,MAAMc,SAASZ,K,iCAIpBU,KAAKL,IAAIK,KAAKX,MAAMC,SAAW,K,iCAI/BU,KAAKL,IAAIK,KAAKX,MAAMC,SAAW,K,kCAGvBa,GACRH,KAAKL,KAAKQ,EAAEC,OAAOC,S,kCAInBL,KAAKL,IAAIK,KAAKX,MAAMC,Y,+BAGd,IAAD,OACL,OACI,6BACI,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,MAAO,CAACC,MAAO,QAASC,QAAS,WAAK,EAAKC,aAA/E,KACA,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,OACLV,MAAOL,KAAKX,MAAMC,SAClB0B,OAAQhB,KAAKR,UACbU,SAAUF,KAAKN,cAC7B,kBAACa,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,MAAO,CAACC,MAAO,QAASC,QAAS,WAAK,EAAKM,aAA/E,W,GA5CSC,IAAMC,W,QCqDpBC,EAnDFC,YAAO,SAAPA,CAAiBC,YAAQ,uKAE9B,IAAMC,EAAOvB,KAAKZ,MAAMoC,OAAOD,KAE3BE,EAAeF,EAAKG,iBAAiBC,MAAMC,KAAI,SAAAC,GAC/C,OACI,wBAAIC,IAAKD,EAAQE,IACb,4BAAKF,EAAQG,OACb,4BAAKH,EAAQI,OACb,4BACI,kBAAC,EAAD,CAAWnC,IAAK,EACLC,IAAK,EACLR,IAAKsC,EAAQvC,SACbY,SAAU,SAACX,GAAD,OAASgC,EAAKW,UAAUL,EAAQE,GAAIxC,OAG7D,4BAAKsC,EAAQI,MAAQJ,EAAQvC,SAA7B,KACA,4BACI,kBAACiB,EAAA,EAAD,CAAQC,QAAQ,SAASG,QAAS,kBAAMY,EAAKY,cAAcN,EAAQE,MAAnE,UAMhB,OACI,oCACI,oCACA,kBAACK,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,GACjB,+BACA,4BACI,qCACA,qCACA,qCACA,wBAAIC,QAAQ,KAAZ,UAEHd,EACD,4BACI,wBAAIc,QAAQ,KAAZ,gBAA8BhB,EAAKiB,WAAWb,MAA9C,KACA,wBAAIY,QAAQ,KACR,kBAAC,IAAD,CAAME,GAAG,UACL,kBAAClC,EAAA,EAAD,2BAxCM,GAAoBW,IAAMC,a,QCoCjDuB,EApCGrB,YAAO,SAAPA,CAAiBC,YAAQ,4MACvCqB,aAAe,SAACxC,GACZ,IAAMyC,EAAQ,EAAKxD,MAAMoC,OAAOoB,MAChCA,EAAMC,SAAS1C,GAEZyC,EAAME,mBAAmBnB,OACxB,EAAKvC,MAAM2D,QAAQC,KAAK,YANO,uDAUnC,IAAMC,EAAajD,KAAKZ,MAAMoC,OAAOoB,MACrC,OACI,oCACI,qCACA,kBAAC/B,EAAA,EAAD,CAAMgC,SAAU7C,KAAK2C,cAChBM,EAAWC,OAAOtB,KAAI,SAAAuB,GACnB,OACI,kBAACtC,EAAA,EAAKuC,MAAN,CAAYtB,IAAKqB,EAAME,MACnB,kBAACxC,EAAA,EAAKyC,MAAN,KAAaH,EAAMI,OACnB,kBAAC1C,EAAA,EAAKC,QAAN,CAAcZ,SAAU+C,EAAWO,aAAcH,KAAMF,EAAME,KAAMtC,KAAMoC,EAAMpC,KAAM0C,YAAaN,EAAMM,cACvGR,EAAWS,OAAOP,EAAME,MAAQ,kBAACM,EAAA,EAAD,CAAOnD,QAAQ,UAAUyC,EAAWS,OAAOP,EAAME,OAAe,OAK7G,kBAACxC,EAAA,EAAKuC,MAAN,KACI,kBAACvC,EAAA,EAAK+C,MAAN,CAAY1D,SAAU+C,EAAWO,aAAcH,KAAK,YAAYtC,KAAK,WAAWwC,MAAM,yDACrFN,EAAWS,OAAX,UAAiC,kBAACC,EAAA,EAAD,CAAOnD,QAAQ,UAAUyC,EAAWS,OAAX,WAAwC,IAEvG,kBAACnD,EAAA,EAAD,CAAQC,QAAQ,UAAUO,KAAK,UAA/B,gBA7BuB,GAAyBG,IAAMC,aCF3DE,cAAO,SAAPA,EAAiB,SAACjC,GAC7B,IAAMwD,EAAQxD,EAAMoC,OAAOoB,MAAMiB,eAAelC,MAE1CF,EAAemB,EAAMkB,SAASlC,KAAI,SAAAC,GAEpC,OACI,wBAAIC,IAAKD,EAAQE,IACb,4BAAKF,EAAQG,OACb,4BAAKH,EAAQI,OACb,4BAAKJ,EAAQI,MAAQJ,EAAQvC,SAA7B,SAKZ,OACI,kBAAC8C,EAAA,EAAD,CAAOC,UAAQ,EAACC,OAAK,GACjB,+BACA,4BACI,wBAAIC,QAAS,GACT,kBAACoB,EAAA,EAAD,CAAOnD,QAAQ,WAAf,6BAKNiB,EACF,4BACI,wBAAIc,QAAS,GAAb,gBAA+BK,EAAMJ,WAArC,W,iCC1BZ,WAAYuB,GAAW,IAAD,gCAFtBD,SAAWE,YAAW,IAEA,KAItBxB,WAAayB,aAAS,WAClB,IAAMhC,EAAQ,EAAKP,iBAAiBC,MAAMuC,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAQC,EAAKnC,MAAQmC,EAAK9E,WAAU,GACrG,OAAO+E,WAAWpC,GAAOqC,QAAQ,MANf,KAStBpC,UAAYqC,aAAO,SAACxC,EAAIxC,GACpB,EAAKuE,SAASU,MAAK,SAAA3C,GAAO,OAAIA,EAAQE,KAAOA,KAAIzC,SAAWC,KAV1C,KAatB4C,cAAgBoC,aAAO,SAACxC,GACpB,EAAK+B,SAASW,OAAO,EAAKX,SAASY,WAAU,SAAA7C,GAAO,OAAIA,EAAQE,KAAOA,KAAK,MAd1D,KAiBtB4C,UAAYJ,aAAO,SAACK,GACZ,EAAKd,SAASU,MAAK,SAAA3C,GAAO,OAAIA,EAAQE,KAAO6C,EAAI7C,OACjD,EAAK+B,SAASd,KAAd,2BAAuB4B,GAAvB,IAA4BtF,SAAU,QAnBxB,KAuBtBuF,aAAeZ,aAAS,WACpB,OAAO,EAAKH,SAASlC,KAAI,SAAAC,GAAO,OAAIA,EAAQE,SAxB1B,KA2BtBL,iBAAmBuC,aAAS,WACxB,OAAO,EAAKH,SAASlC,KAAI,SAACkD,GACtB,IAAIjD,EAAU,EAAKkC,UAAUD,SAASiB,QAAQD,EAAG/C,IACjD,OAAO,2BAAIF,GAAX,IAAoBvC,SAAUwF,EAAGxF,iBA9BnB,KAkCtB0F,MAAQT,aAAO,WACX,EAAKT,SAASmB,WAlCdjF,KAAK+D,UAAYA,G,aCDrB,WAAYA,GAAW,IAAD,gCAFtBmB,MAAQlB,YAAW,IAEG,KAKtBmB,KAAOZ,aAAO,WACV,OAAO,IAAIa,SAAQ,SAACC,GAChB,EAAKC,IAAIC,MAAMC,MAAK,SAACC,GACjB,EAAKP,MAAQO,EACbJ,GAAQ,YARhBrF,KAAK+D,UAAYA,EACjB/D,KAAKsF,IAAMtF,KAAK+D,UAAUuB,IAAIxB,S,oDAY1B/B,GACJ,OAAO/B,KAAKkF,MAAMV,MAAK,SAAA3C,GAAO,OAAIA,EAAQE,KAAOA,S,kBCdrD,WAAYgC,GAAW,IAAD,gCAFtBnB,MAAQoB,YAAW,IAEG,KAItBd,OAASc,YAiFF,CACH,CACIX,KAAM,OACNtC,KAAM,OACN0C,YAAa,uBACbF,MAAO,aAEX,CACIF,KAAM,QACNtC,KAAM,QACN0C,YAAa,oBACbF,MAAO,SAEX,CACIF,KAAM,QACNtC,KAAM,QACN0C,YAAa,aACbF,MAAO,WAtGO,KAMtBG,OAASM,YAAW,IANE,KAQtB0B,SAAU,EARY,KAUtB7B,eAAiBI,aAAS,WACtB,IAAM0B,EAAe,EAAK5B,UAAUxC,KAAKG,iBAAiBC,MACpDa,EAAa,EAAKuB,UAAUxC,KAAKiB,WAAWb,MAE5CmC,EAAW6B,EAAa/D,KAAI,SAACkD,GAC/B,IAAIjD,EAAU,EAAKkC,UAAUD,SAASiB,QAAQD,EAAG/C,IACjD,OAAO,2BAAIF,GAAX,IAAoBvC,SAAUwF,EAAGxF,cAIrC,OADA,EAAKyE,UAAUxC,KAAKyD,QACb,CAAElB,WAAUtB,iBApBD,KA4BtBgB,aAAee,aAAO,SAACpE,GACnB,EAAK+C,OAAO/C,EAAEC,OAAOiD,MAAQlD,EAAEC,OAAOC,MACtC,EAAKqD,OAAOvD,EAAEC,OAAOiD,MAAQ,MA9BX,KA8EtBP,mBAAqBmB,aAAS,WAC1B,OAAO,EAAKyB,WA9EZ1F,KAAK+D,UAAYA,E,qDAsBX5D,GACNA,EAAEyF,iBACF5F,KAAK6F,iB,qCASL,IAAI3C,EAASlD,KAAKkD,OAiBlB,GAfIA,EAAOG,OACPrD,KAAK0D,OAAOL,KAAO,mBAGG,qBAAhBH,EAAOG,OACTH,EAAOG,KAAKyC,MAAM,2CAClB9F,KAAK0D,OAAOL,KAAO,iBAKvBH,EAAO6C,QACP/F,KAAK0D,OAAOqC,MAAQ,mBAGG,qBAAjB7C,EAAO6C,MAAsB,CACnC,IAAIC,EAAY9C,EAAO6C,MAAME,YAAY,KACrCC,EAAahD,EAAO6C,MAAME,YAAY,KAEpCD,EAAYE,GAAcF,EAAY,IAAqC,IAAhC9C,EAAO6C,MAAMI,QAAQ,OAAgBD,EAAa,GAAMhD,EAAO6C,MAAMK,OAASF,EAAc,IACzIlG,KAAK0D,OAAOqC,MAAQ,sBAKxB7C,EAAOmD,QACPrG,KAAK0D,OAAO2C,MAAQ,mBAGG,qBAAjBnD,EAAOmD,QACTnD,EAAOmD,MAAMP,MAAM,cACnB9F,KAAK0D,OAAO2C,MAAQ,2CAIxBnD,EAAOoD,YACPtG,KAAK0D,OAAO4C,UAAY,kBAG5BtG,KAAK0F,QAAUa,OAAOC,OAAOxG,KAAK0D,QAAQ+C,OAAM,SAAAC,GAAK,OAAKA,S,KCjFlE,IAAMC,EAAU,4BCEhB,SAASpB,IACL,ODDW,SAAqBqB,GAAsC,IAAjCC,EAAgC,uDAAtB,GAAIC,EAAkB,uDAARH,EAC7D,OAAOI,MAAMD,EAAUF,EAAKC,GAASrB,MAAK,SAACwB,GACvC,OAAuB,MAApBA,EAASC,OACDD,EAASE,OAAO1B,MAAK,SAAS0B,GACjC,MAAM,IAAIC,MAAMD,MAIjBF,EAASI,UCPbC,CAAY,Y,ICeR,MAXX,aAAe,oBACXrH,KAAKsF,IAAM,CACPxB,YAGJ9D,KAAKuB,KAAO,IAAI+F,EAAUtH,MAC1BA,KAAK8D,SAAW,IAAIyD,EAAcvH,MAClCA,KAAK4C,MAAQ,IAAI4E,EAAWxH,OCZrB,oBAAM,yBAAKyH,UAAU,eAAc,yBAAKC,IAAK,0BAA2BC,IAAI,OCmE5EC,EA5DEvG,YAAO,SAAPA,CAAiBC,YAAQ,4MAEtCjC,MAAQ,CACJwI,YAAY,GAHsB,kEAMjB,IAAD,OAChBrG,EAAOsC,SAASqB,OAAO2C,SAAQ,WAC3B,EAAK7H,SAAS,CAAE4H,YAAY,SARE,+BAalC,IAAM/D,EAAW9D,KAAKZ,MAAMoC,OAAOsC,SAASoB,MACtC3D,EAAOvB,KAAKZ,MAAMoC,OAAOD,KACzBwG,EAAiBxG,EAAKsD,aAAalD,MAEzC,OACI,oCACI,wCACC3B,KAAKX,MAAMwI,WAAa,kBAACG,EAAD,MACrB,yBAAKP,UAAU,OACV3D,EAASlC,KAAI,SAAAC,GACV,OACI,yBAAK4F,UAAU,yBAAyB3F,IAAKD,EAAQE,IACjD,kBAACkG,EAAA,EAAD,KACKF,EAAeG,SAASrG,EAAQE,KACjC,yBAAK0F,UAAU,cACVC,IAAK,+BACL/G,QAAS,kBAAIY,EAAKY,cAAcN,EAAQE,KAAK4F,IAAI,KACtD,kBAACM,EAAA,EAAKE,KAAN,CAAWC,GAAID,IAAM1F,GAAI,IAAMZ,EAAQE,GAAI0F,UAAU,YACjD,kBAACQ,EAAA,EAAKI,IAAN,CAAU7H,QAAQ,MAAMkH,IAAK7F,EAAQyG,SAEzC,kBAACL,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKO,MAAN,KACI,kBAACP,EAAA,EAAKE,KAAN,CAAWC,GAAID,IAAM1F,GAAI,IAAMZ,EAAQE,IAAKF,EAAQG,QAExD,kBAACiG,EAAA,EAAKQ,KAAN,KACK5G,EAAQ6G,cAGjB,kBAACT,EAAA,EAAKU,OAAN,KACI,kBAACV,EAAA,EAAKQ,KAAN,CAAWhB,UAAU,qDACjB,8BAAM,qCAAN,IAAqB5F,EAAQI,MAA7B,KACC8F,EAAeG,SAASrG,EAAQE,IAC3B,kBAACxB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,gBACA,kBAACD,EAAA,EAAD,CAAQC,QAAQ,OAAOG,QAAS,kBAAIY,EAAKoD,UAAU9C,KAAnD,4BA9CZ,GAAwBX,IAAMC,aCgCzDyH,EApCKvH,YAAO,SAAPA,CAAiBC,YAAQ,uKAErC,IAAMC,EAAOvB,KAAKZ,MAAMoC,OAAOD,KACzBwG,EAAiBxG,EAAKsD,aAAalD,MACnCI,EAAK/B,KAAKZ,MAAM0G,MAAM+C,OAAO9G,GAC7BF,EAAU7B,KAAKZ,MAAMoC,OAAOsC,SAASoB,MAAMV,MAAK,SAAA3C,GAAO,OAAIA,EAAQE,MAAQA,KAEjF,OACI,yBAAK0F,UAAU,OACX,yBAAKA,UAAU,qBACX,kBAACQ,EAAA,EAAD,CAAMR,UAAU,aACZ,kBAACQ,EAAA,EAAKI,IAAN,CAAU7H,QAAQ,MAAMkH,IAAK7F,EAAQyG,UAG7C,yBAAKb,UAAU,qBACX,0BAAMA,UAAU,YAAhB,YACA,kBAACQ,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKO,MAAN,KAAa3G,EAAQG,OACrB,kBAACiG,EAAA,EAAKQ,KAAN,KACK5G,EAAQ6G,cAGjB,kBAACT,EAAA,EAAKU,OAAN,KACI,kBAACV,EAAA,EAAKQ,KAAN,CAAWhB,UAAU,qDACjB,8BAAM,qCAAN,IAAqB5F,EAAQI,MAA7B,KACC8F,EAAeG,SAASrG,EAAQE,IAC3B,kBAACxB,EAAA,EAAD,CAAQC,QAAQ,SAASG,QAAS,kBAAIY,EAAKY,cAAcN,EAAQE,MAAjE,oBACA,kBAACxB,EAAA,EAAD,CAAQC,QAAQ,OAAOG,QAAS,kBAAIY,EAAKoD,UAAU9C,KAAnD,uBA3BW,GAA2BX,IAAMC,aCH/D,aACX,OACI,oCACI,6CACA,wPC8CG2H,EAnCHxH,YAAQ,uKAEd,OACI,yBAAKmG,UAAU,aACb,kBAAC,IAAD,KACI,kBAACsB,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAMxB,UAAU,QACtC,kBAACsB,EAAA,EAAOG,SAAR,CAAiBnH,GAAG,oBAChB,kBAACoH,EAAA,EAAD,CAAK1B,UAAU,WACX,kBAAC0B,EAAA,EAAIC,KAAL,KACI,kBAACD,EAAA,EAAIhB,KAAL,CAAUkB,OAAK,EAACjB,GAAIkB,IAAS7G,GAAG,KAAhC,YAEJ,kBAAC0G,EAAA,EAAIC,KAAL,KACI,kBAACD,EAAA,EAAIhB,KAAL,CAAUC,GAAIkB,IAAS7G,GAAG,aAA1B,uBAGR,kBAAC,IAAD,CAASA,GAAG,SACR,yBAAKgF,UAAU,qBAAqBC,IAAK,iCAAkCC,IAAI,QAK3F,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0B,OAAK,EAACE,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO2B,KAAK,QAAQC,UAAWpI,IAC/B,kBAAC,IAAD,CAAOmI,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWE,IACjC,kBAAC,IAAD,CAAOH,KAAK,YAAYC,UAAWG,IACnC,kBAAC,IAAD,CAAOJ,KAAK,OAAOC,UAAWZ,WA3B9B,GAAmB1H,IAAMC,YCT7CyI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUtI,OAAQA,GACd,kBAAC,EAAD,OAFR,KAKAuI,SAASC,eAAe,W","file":"static/js/main.b033b85e.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            quantity: this.props.qty\n        }\n\n        this.changeVal = this.changeVal.bind(this);\n        this.onChangeVal = this.onChangeVal.bind(this);\n        this.set = this.set.bind(this);\n    }\n\n    set(newVal){\n        let quantity = Math.min(Math.max(newVal, this.props.min), this.props.max);\n        this.setState({quantity});\n\n        this.props.onChange(quantity);\n    }\n\n    decrease() {\n        this.set(this.state.quantity - 1)\n    }\n\n    increase() {\n        this.set(this.state.quantity + 1)\n    }\n\n    onChangeVal(e) {\n        this.set(+e.target.value)\n    }\n\n    changeVal() {\n        this.set(this.state.quantity)\n    }\n\n    render() {\n        return (\n            <div>\n                <InputGroup>\n                    <Button variant=\"outline-secondary\" style={{width: \"35px\"}} onClick={()=>{this.decrease()}}>-</Button>\n                    <Form.Control type=\"text\"\n                                  value={this.state.quantity}\n                                  onBlur={this.changeVal}\n                                  onChange={this.onChangeVal} />\n                    <Button variant=\"outline-secondary\" style={{width: \"35px\"}} onClick={()=>{this.increase()}}>+</Button>\n                </InputGroup>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport AppMinMax from '../../components/AppMinMax'\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport { Link } from \"react-router-dom\";\nimport { observer, inject } from 'mobx-react';\n\nconst Cart = inject('stores')(observer(class Cart extends React.Component {\n    render(){\n        const cart = this.props.stores.cart;\n\n        let productsRows = cart.productsDetailed.get().map(product => {\n            return (\n                <tr key={product.id}>\n                    <td>{product.title}</td>\n                    <td>{product.price}</td>\n                    <td>\n                        <AppMinMax min={1}\n                                   max={5}\n                                   qty={product.quantity}\n                                   onChange={(qty) => cart.changeQty(product.id, qty)}\n                        />\n                    </td>\n                    <td>{product.price * product.quantity}$</td>\n                    <td>\n                        <Button variant=\"danger\" onClick={() => cart.deleteProduct(product.id)}>x</Button>\n                    </td>\n                </tr>\n            );\n        });\n\n        return (\n            <>\n                <h2>Cart</h2>\n                <Table bordered hover>\n                    <tbody>\n                    <tr>\n                        <td>Title</td>\n                        <td>Price</td>\n                        <td>Count</td>\n                        <td colSpan=\"2\">Total</td>\n                    </tr>\n                    {productsRows}\n                    <tr>\n                        <td colSpan=\"3\">Total price: {cart.totalPrice.get()}$</td>\n                        <td colSpan=\"2\">\n                            <Link to='/order'>\n                                <Button>Checkout</Button>\n                            </Link>\n                        </td>\n                    </tr>\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n}))\n\nexport default Cart;","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nimport { observer, inject } from 'mobx-react';\n\nconst OrderForm = inject('stores')(observer(class OrderForm extends React.Component {\n    handleSubmit = (e)=>{\n        const order = this.props.stores.order;\n        order.onSubmit(e)\n\n        if(order.isValidationPassed.get()){\n            this.props.history.push('/result')\n        }\n    }\n    render() {\n        const orderModel = this.props.stores.order;\n        return (\n            <>\n                <h2>Order</h2>\n                <Form onSubmit={this.handleSubmit}>\n                    {orderModel.fields.map(field => {\n                        return (\n                            <Form.Group key={field.name}>\n                                <Form.Label>{field.label}</Form.Label>\n                                <Form.Control onChange={orderModel.handleChange} name={field.name} type={field.type} placeholder={field.placeholder}/>\n                                {orderModel.errors[field.name] ? <Alert variant=\"danger\">{orderModel.errors[field.name]}</Alert>:''}\n                            </Form.Group>\n                        )\n                    })}\n\n                    <Form.Group>\n                        <Form.Check onChange={orderModel.handleChange} name=\"isConfirm\" type=\"checkbox\" label=\"I consent to the processing and use of personal data\" />\n                        {orderModel.errors[\"isConfirm\"] ? <Alert variant=\"danger\">{orderModel.errors[\"isConfirm\"]}</Alert>:''}\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">Submit</Button>\n                </Form>\n            </>\n        )\n    }\n}))\n\nexport default OrderForm;","import React from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport Alert from 'react-bootstrap/Alert';\nimport { inject } from \"mobx-react\";\n\nexport default inject('stores')((props) => {\n    const order = props.stores.order.lastOrderCache.get();\n\n    const productsRows = order.products.map(product => {\n\n        return (\n            <tr key={product.id}>\n                <td>{product.title}</td>\n                <td>{product.price}</td>\n                <td>{product.price * product.quantity}$</td>\n            </tr>\n        );\n    });\n\n    return (\n        <Table bordered hover>\n            <tbody>\n            <tr>\n                <td colSpan={3}>\n                    <Alert variant=\"success\">\n                        Your order is accepted!\n                    </Alert>\n                </td>\n            </tr>\n            { productsRows }\n            <tr>\n                <td colSpan={3}>Total price: { order.totalPrice }$</td>\n            </tr>\n            </tbody>\n        </Table>\n    )\n})","import { observable, computed, action } from 'mobx';\r\n\r\nexport default class {\r\n    products = observable([])\r\n\r\n    constructor(rootStore){\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    totalPrice = computed(() => {\r\n        const price = this.productsDetailed.get().reduce((accum,item) => accum + item.price * item.quantity, 0)\r\n        return parseFloat(price).toFixed(2);\r\n    })\r\n\r\n    changeQty = action((id, qty) => {\r\n        this.products.find(product => product.id === id).quantity = qty\r\n    })\r\n\r\n    deleteProduct = action((id) => {\r\n        this.products.splice(this.products.findIndex(product => product.id === id), 1);\r\n    })\r\n\r\n    addToCart = action((obj) => {\r\n        if(!this.products.find(product => product.id === obj.id)){\r\n            this.products.push({...obj, quantity: 1})\r\n        }\r\n    })\r\n\r\n    productsList = computed(() => {\r\n        return this.products.map(product => product.id);\r\n    })\r\n\r\n    productsDetailed = computed(() => {\r\n        return this.products.map((pr) => {\r\n            let product = this.rootStore.products.getById(pr.id);\r\n            return {...product, quantity: pr.quantity};\r\n        });\r\n    })\r\n\r\n    reset = action(() => {\r\n        this.products.clear();\r\n    })\r\n}\r\n\r\n","import {observable, action} from 'mobx';\r\n\r\nexport default class{\r\n    items = observable([])\r\n\r\n    constructor(rootStore){\r\n        this.rootStore = rootStore;\r\n        this.api = this.rootStore.api.products;\r\n    }\r\n\r\n    load = action(() => {\r\n        return new Promise((resolve) => {\r\n            this.api.all().then((data) => {\r\n                this.items = data;\r\n                resolve(true);\r\n            });\r\n        });\r\n    })\r\n\r\n    getById(id){\r\n        return this.items.find(product => product.id === id);\r\n    }\r\n}","import {action, computed, observable} from 'mobx';\r\n\r\nexport default class {\r\n\r\n    order = observable([])\r\n\r\n    constructor(rootStore){\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    fields = observable(getFields());\r\n\r\n    errors = observable({});\r\n\r\n    isValid = false;\r\n\r\n    lastOrderCache = computed(() => {\r\n        const cartProducts = this.rootStore.cart.productsDetailed.get();\r\n        const totalPrice = this.rootStore.cart.totalPrice.get();\r\n\r\n        const products = cartProducts.map((pr) => {\r\n            let product = this.rootStore.products.getById(pr.id);\r\n            return {...product, quantity: pr.quantity};\r\n        });\r\n\r\n        this.rootStore.cart.reset();\r\n        return { products, totalPrice }\r\n    })\r\n\r\n    onSubmit (e) {\r\n        e.preventDefault();\r\n        this.validateForm();\r\n    }\r\n\r\n    handleChange = action((e)=>{\r\n        this.fields[e.target.name] = e.target.value\r\n        this.errors[e.target.name] = ''\r\n    })\r\n\r\n    validateForm () {\r\n        let fields = this.fields;\r\n\r\n        if(!fields.name){\r\n            this.errors.name = \"Cannot be empty\";\r\n        }\r\n\r\n        if(typeof fields.name !== \"undefined\"){\r\n            if(!fields.name.match(/^[a-zA-Zа-яА-я\\s]+$/)){\r\n                this.errors.name = \"Only letters\";\r\n            }\r\n        }\r\n\r\n        //Email\r\n        if(!fields.email){\r\n            this.errors.email = \"Cannot be empty\";\r\n        }\r\n\r\n        if(typeof fields.email !== \"undefined\"){\r\n            let lastAtPos = fields.email.lastIndexOf('@');\r\n            let lastDotPos = fields.email.lastIndexOf('.');\r\n\r\n            if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields.email.indexOf('@@') === -1 && lastDotPos > 2 && (fields.email.length - lastDotPos) > 2)) {\r\n                this.errors.email = \"Email is not valid\";\r\n            }\r\n        }\r\n\r\n        //Phone\r\n        if(!fields.phone){\r\n            this.errors.phone = \"Cannot be empty\";\r\n        }\r\n\r\n        if(typeof fields.phone !== \"undefined\"){\r\n            if(!fields.phone.match(/^\\d{10}$/)){\r\n                this.errors.phone = \"Incorrect number, should be 10 numbers\";\r\n            }\r\n        }\r\n\r\n        if(!fields.isConfirm){\r\n            this.errors.isConfirm = \"Please confirm\";\r\n        }\r\n\r\n        this.isValid = Object.values(this.errors).every(error => !error)\r\n    }\r\n\r\n    isValidationPassed = computed(() => {\r\n        return this.isValid\r\n    })\r\n}\r\n\r\n\r\nfunction getFields(){\r\n    return [\r\n        {\r\n            name: 'name',\r\n            type: 'text',\r\n            placeholder: 'Enter your full name',\r\n            label: 'Full name'\r\n        },\r\n        {\r\n            name: 'email',\r\n            type: 'email',\r\n            placeholder: 'example@email.com',\r\n            label: 'Email'\r\n        },\r\n        {\r\n            name: 'phone',\r\n            type: 'phone',\r\n            placeholder: '0937777777',\r\n            label: 'Phone'\r\n        },\r\n    ];\r\n}\r\n","const API_URL = 'https://fakestoreapi.com/';\r\n\r\nexport default function makeRequest(url, options = {}, baseUrl = API_URL){\r\n    return fetch(baseUrl + url, options).then((response) => {\r\n        if(response.status !== 200){\r\n            return response.text().then(function(text){\r\n                throw new Error(text);\r\n            });\r\n        }\r\n\r\n        return response.json();\r\n    });\r\n}","import makeRequest from './helpers/makeRequest';\r\n\r\nfunction all(){\r\n    return makeRequest('products');\r\n}\r\n\r\nexport { all };","import cartStore from './cart';\r\nimport productsStore from './products';\r\nimport orderStore from './order';\r\n\r\nimport * as products from '../api/products';\r\n\r\nclass RootStore {\r\n    constructor() {\r\n        this.api = {\r\n            products\r\n        };\r\n\r\n        this.cart = new cartStore(this);\r\n        this.products = new productsStore(this);\r\n        this.order = new orderStore(this);\r\n    }\r\n}\r\n\r\nexport default new RootStore();","import React from 'react';\n\nexport default () => <div className=\"text-center\"><img src={'assets/icons/loader.gif'} alt=\"\"/></div>;","import React from \"react\";\nimport Card from 'react-bootstrap/Card';\nimport './product.css';\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport { observer, inject } from \"mobx-react\";\nimport stores from \"../../store\";\nimport Loader from \"../../components/Loader\";\n\nconst Products = inject('stores')(observer(class Products extends React.Component {\n\n    state = {\n        showLoader: true\n    }\n\n    componentDidMount() {\n        stores.products.load().finally(()=>{\n            this.setState({ showLoader: false })\n        })\n    }\n\n    render(){\n        const products = this.props.stores.products.items\n        const cart = this.props.stores.cart\n        const productsInCart = cart.productsList.get()\n\n        return (\n            <>\n                <h2>Products</h2>\n                {this.state.showLoader ? <Loader/> :\n                    <div className=\"row\">\n                        {products.map(product => {\n                            return (\n                                <div className=\"col-lg-3 col-md-6 mb-4\" key={product.id}>\n                                    <Card>\n                                        {productsInCart.includes(product.id) &&\n                                        <img className=\"remove-icon\"\n                                             src={'assets/icons/remove-icon.png'}\n                                             onClick={()=>cart.deleteProduct(product.id)} alt=\"\"/>}\n                                        <Card.Link as={Link} to={'/' + product.id} className=\"card-img\">\n                                            <Card.Img variant=\"top\" src={product.image}/>\n                                        </Card.Link>\n                                        <Card.Body>\n                                            <Card.Title>\n                                                <Card.Link as={Link} to={'/' + product.id}>{product.title}</Card.Link>\n                                            </Card.Title>\n                                            <Card.Text>\n                                                {product.description}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer>\n                                            <Card.Text className=\"d-flex justify-content-between align-items-center\">\n                                                <span><b>Price:</b> {product.price}$</span>\n                                                {productsInCart.includes(product.id)\n                                                    ? <Button variant=\"success\">Item in cart</Button>\n                                                    : <Button variant=\"info\" onClick={()=>cart.addToCart(product)}>Add to cart</Button>}\n                                            </Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            )\n                        })}\n                    </div>\n                }\n            </>\n        )\n    }\n}))\n\nexport default Products;","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport { observer, inject } from 'mobx-react';\n\nconst productCard = inject('stores')(observer(class productCard extends React.Component {\n    render() {\n        const cart = this.props.stores.cart\n        const productsInCart = cart.productsList.get()\n        const id = this.props.match.params.id;\n        const product = this.props.stores.products.items.find(product => product.id === +id);\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-lg-4 col-md-6\">\n                    <Card className=\"mb-4 card\">\n                        <Card.Img variant=\"top\" src={product.image}/>\n                    </Card>\n                </div>\n                <div className=\"col-lg-8 col-md-6\">\n                    <span className=\"in_stock\">in stock</span>\n                    <Card.Body>\n                        <Card.Title>{product.title}</Card.Title>\n                        <Card.Text>\n                            {product.description}\n                        </Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Card.Text className=\"d-flex justify-content-between align-items-center\">\n                            <span><b>Price:</b> {product.price}$</span>\n                            {productsInCart.includes(product.id)\n                                ? <Button variant=\"danger\" onClick={()=>cart.deleteProduct(product.id)}>Remove from cart</Button>\n                                : <Button variant=\"info\" onClick={()=>cart.addToCart(product)}>Add to cart</Button>}\n                        </Card.Text>\n                    </Card.Footer>\n                </div>\n            </div>\n        )\n    }\n}))\n\nexport default productCard;","import React from \"react\";\n\nexport default () => {\n    return (\n        <>\n            <h3>How it works:</h3>\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis delectus deleniti earum facere, hic id laborum modi molestias nemo neque non numquam perferendis possimus qui quisquam reprehenderit soluta ullam ut.</p>\n        </>\n    )\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { observer } from 'mobx-react';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    NavLink\n} from \"react-router-dom\";\nimport Cart from './pages/Cart';\nimport Order from './pages/OrderForm';\nimport Result from './pages/Result';\nimport Products from './pages/Products';\nimport productCard from './pages/Card';\nimport Delivery from './pages/Delivery';\n\nconst App = observer(class App extends React.Component {\n  render(){\n      return (\n          <div className=\"container\">\n            <Router>\n                <Navbar bg=\"light\" expand=\"lg\"  className=\"mb-3\">\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Item>\n                                <Nav.Link exact as={NavLink} to=\"/\">Catalog</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link as={NavLink} to=\"/delivery\">Pickup & delivery</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                        <NavLink to=\"/cart\">\n                            <img className=\"shopping-cart-icon\" src={'assets/icons/shopping-cart.png'} alt=\"\"/>\n                        </NavLink>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                <Switch>\n                    <Route exact path=\"/\" component={Products}/>\n                    <Route path=\"/cart\" component={Cart}/>\n                    <Route path=\"/order\" component={Order}/>\n                    <Route path=\"/result\" component={Result}/>\n                    <Route path=\"/delivery\" component={Delivery}/>\n                    <Route path=\"/:id\" component={productCard}/>\n                </Switch>\n            </Router>\n        </div>\n      )\n  }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport { Provider } from 'mobx-react';\nimport stores from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider stores={stores}>\n          <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root'));\n"],"sourceRoot":""}